/*
Project:  wil_ard
Board:    uno
MCU:    16MHzatmega328  
FRENQUENCY: 16000000
*/

#ifndef ARDUINO_H
#define ARDUINO_H
#include <Arduino.h>
#endif

//************************************************************
//* INCLUSION SECTION
//* Include semua avr-libc library yang di butuhkan
//* sementara gak perlu dulu

//************************************************************
//* MACROS SECTION
//* Define semua definisi yang di butuhkan
//by Achmadi
#define string_input_len 16

// by Wilujeng
#define Cal_Factor 0.0001984
#define SensorPin A1            //pH meter Analog output to Arduino Analog Input 0
#define PWM_PIN 9
#define Offset 0.20            //kompensasi deviasi
#define LED 13
#define TEST 11
#define setpoint 6.25
#define samplingInterval 20
#define printInterval 5000
#define ArrayLenth  40    //waktu rentang pengumpulan

//************************************************************
//* VARIABLE SECTION
//* Deklarasi semua variabel global

// by Achmadi
char inString[string_input_len];
FILE uart_out = {0} ;
FILE uart_in = {0} ;

// by Wilujeng
//int pHArray[ArrayLenth];   //tempat menyimpan rata2 nilai feedback dari sensor
//int pHArrayIndex=0;
uint8_t i;
uint32_t pHAvgSum;
unsigned long interval=0;
unsigned long samplingTime = millis();
unsigned long printTime = millis();
//float pHValue,voltage, fuzzy;
unsigned long out;
float v_p10=3.3;
float v_p7=1.96;
float v_p4=1.21;
float temp_cal=27;
int error;
float temp=27;

// by Achmadi for Wilujeng
volatile float pHValue,voltage, fuzzy;
volatile unsigned int time_fuzzy;
volatile unsigned char status_tunggu;

//************************************************************
//* FUNCTION DECLARATION SECTION
//* Deklarasi semua fungsi

// by Achmadi
void delay_ms(unsigned int v_delay); //pengganti fungsi tunda
void serial_setup(unsigned int baud); //pengganti fungsi inisialisasi serial
int uart_getchar(FILE*stream); //pengganti fungsi read serial
int uart_putchar(char ch,FILE*stream); //pengganti fungsi kirim serial

// by Wilujeng
void set_pwm(int duty);
double avergearray(int* arr, int number);
float pHConversion(float input, float cal_1, float cal_2, float cal_3, float temp, float temp_cal);

// by Achmadi for Wilujeng
void motor_act(unsigned int duty, unsigned int lamanya);

//************************************************************
//* SETUP AND LOOP SECTION
//* setup() and loop() referensi untuk dipanggil dari main()
void setup()
{
    // by Achmadi
    serial_setup(9600);

    // by Wilujeng
    pinMode(PWM_PIN,OUTPUT);
    set_pwm(0);
    pinMode(LED,OUTPUT);

    // by Achmadi for Wilujeng
    // Untuk led indikator pengganti motor (sementara)
    digitalWrite(LED,LOW);
}

void loop()
{
  digitalWrite(LED,HIGH);
  delay_ms(200);
  pHAvgSum=0;
  for(i=0;i<ArrayLenth;i++){
    pHAvgSum = pHAvgSum + analogRead(SensorPin);
  }
  voltage = pHAvgSum / ArrayLenth;
  pHValue = pHConversion(voltage,v_p10,v_p7,v_p4,temp,temp_cal);
  digitalWrite(LED,LOW);
  delay_ms(200);
  
//    // by Wilujeng
//    if(millis()-samplingTime > samplingInterval){
//        pHArray[pHArrayIndex++]=analogRead(SensorPin);
//        if(pHArrayIndex==ArrayLenth){pHArrayIndex=0;}
//        voltage = avergearray(pHArray, ArrayLenth)*4.9/1024;
//        pHValue = pHConversion(voltage,v_p10,v_p7,v_p4,temp,temp_cal);
//
//        samplingTime=millis();
//    }
}

//************************************************************
//* INTERRUPT HANDLER FUNCTION REFERENCES SECTION
//* Referensi semua fungsi interrupt handler

// by Achmadi
// Interrupt receive handler
ISR(USART_RX_vect){

    // by Achmadi
    scanf("%s",&inString); //menerima data string
     //konversi data string ke integer

    if(strcmp(inString,"ph")==0){
      printf("%f \n",pHValue);
    }
    else{
      unsigned int inStringInt = atoi(inString);
      time_fuzzy = inStringInt;
      motor_act(75,1);
    }

    reti();
    return;
}

//************************************************************
//* FUNCTION REFERENCES SECTION
//* Referensi semua fungsi

// by Achmadi
//pengganti fungsi inisialisasi serial
void serial_setup(unsigned int baud){
    UCSR0B|=1<<RXEN0;
    UCSR0B|=1<<TXEN0;
    UCSR0B|=1<<RXCIE0;

    UBRR0H=(((F_CPU / (baud * 16UL))) - 1)>>8;
    UBRR0L=(((F_CPU / (baud * 16UL))) - 1);

    UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);

    fdev_setup_stream (&uart_out, uart_putchar, NULL, _FDEV_SETUP_WRITE);
    fdev_setup_stream (&uart_in, NULL, uart_getchar, _FDEV_SETUP_READ);
    stdout=&uart_out;
    stdin=&uart_in;

    sei();

}

//pengganti fungsi read serial
int uart_putchar(char ch,FILE*stream)
{
    if(ch=='\n'){uart_putchar('\r',stream);}
    while ((UCSR0A & (1 << UDRE0)) == 0) {};
    UDR0=ch;
    return 0;
}

//pengganti fungsi read serial
int uart_getchar(FILE*stream)
{
    char temp;
    while ((UCSR0A & (1 << RXC0)) == 0) {};
    temp=UDR0;
    return(temp);
}

//pengganti fungsi tunda
void delay_ms(unsigned int v_delay){
    unsigned int i=0;

    for(i=0;i<v_delay;i++){
        _delay_ms(1);
    }
}

// by Wilujeng
void set_pwm(int duty){
    int val_duty=duty*255/100;
    analogWrite(PWM_PIN,255-val_duty);
}

double avergearray(int* arr, int number){
    int i;
    int max,min;
    double avg;
    long amount=0;

    if(number<=0){
       printf("Error number for the array to avraging! \n");
       return 0;
    }

    if(number<5){   //less than 5, calculated directly statistics

       for(i=0;i<number;i++){
        amount+=arr[i];
       }

       avg = amount/number;
       return avg;
    }
    else{
        if(arr[0]<arr[1]){
          min = arr[0];max=arr[1];
        }
        else{
          min=arr[1];max=arr[0];
        }

       for(i=2;i<number;i++){
         if(arr[i]<min){
           amount+=min;        //arr<min
           min=arr[i];
         }else {
           if(arr[i]>max){
             amount+=max;    //arr>max
             max=arr[i];
           }else{
             amount+=arr[i]; //min<=arr<=max
           }
         }//if
       }
      avg = (double)amount/(number-2);
    }

    return avg;
}

float pHConversion(float input, float cal_1, float cal_2, float cal_3, float temp, float temp_cal){
    float value;
    float zero_value;
    float sensitivity;

    if( (temp < 0)||(temp > 100) ){
        return -1.0;
    }
    if((temp_cal < 0)||(temp_cal > 100)){
        return -2.0;
    }

    // The value at pH 7.0 is taken as reference
    zero_value = cal_2;

    // The sensitivity is calculated using the other two calibration values
    sensitivity = (cal_3-cal_1)/6;

    // Add the change in the conductivity owed to the change in temperature
    sensitivity = sensitivity + (temp - temp_cal)*Cal_Factor;

    // pH value calculated from the calibration values
    value= 7.0 + (zero_value-input)/sensitivity;
       return value;
}

// by Achmadi for Wilujeng
void motor_act(unsigned int duty, unsigned int lamanya){

    // by Achmadi for Wilujeng
    // Untuk led indikator pengganti motor (sementara)
    digitalWrite(LED,HIGH);
    set_pwm(duty);

    delay_ms(lamanya*1000);

    set_pwm(0);

    // by Achmadi for Wilujeng
    // Untuk led indikator pengganti motor (sementara)
    digitalWrite(LED,LOW);
}
